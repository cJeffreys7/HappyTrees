@model IEnumerable<HappyTrees.Models.Painting>

@{
    ViewData["Title"] = "Season";

    int totalSeasons = 7;
    int currentSeason = Model.First().Season;
}

<style>
    h1 {
        font-size: 48px;
    }

    #season-select {
        margin: 16px 0px;
    }

    .scrollable-menu {
        height: auto;
        max-height: 200px;
        overflow-x: hidden;
    }

    #season-text {
        font-size: 20px;
        color: black;
    }

    .painting-grid {
        display: grid;
        grid-template-columns: 256px 256px 256px 256px;
        grid-template-rows: repeat(auto-fill minmax(256px, 320px));
        grid-gap: 16px;
    }

    .painting-preview {
        display: grid;
        grid-template-rows: auto auto auto;
    }

    .painting-thumbnail {
        width: 256px;
    }

    .painting-ID {
        font-size: 14px;
    }

    .painting-name {
        font-size: 14px;
        font-weight: 500;
    }
</style>

<h1>Season @currentSeason</h1>

<div id="season-select" class="btn-group">
    <button class="btn-default dropdown-toggle" type="button" data-toggle="dropdown">Choose Season<span class="caret"></span></button>
    <ol class="dropdown-menu scrollable-menu" role="menu">
        @for (int i = 0; i < totalSeasons + 1; i++)
        {
            if (i == 0)
            {
                <li><a href="@Url.Action("AllPaintings", "Painting")" id="season-text">All Seasons</a></li>

            }
            else
            {
                <li>
                    <a href="@Url.Action("SeasonIn", "Painting", new { season = i, totalSeason = totalSeasons})"
                       id="season-text">Season @i</a>
                </li>

            }
        }
    </ol>
</div>

<div class="painting-grid">
    @foreach (var item in Model)
    {
        // Format season and episode ID, set paintingName
        string paintingID = "S" + item.Season + "E" + item.Episode;
        string paintingName = item.Title;
        string paintingNameClean = paintingName.Replace(" ", "-");

        <div class="painting-preview">
            <div>
                @* Create an a tag from current item image to open PaintingDetails view
                    Passes current item as Painting parameter to new view*@
                <a href="@Url.Action("PaintingDetailsIn", "Painting", new { id = item.Id, title = paintingNameClean })">
                    <img class="painting-thumbnail" src="@Url.Content(item.ThumbnailFile)" alt="Painting Thumbnail">
                </a>
            </div>
            <div class="painting-ID">
                @paintingID
            </div>
            <div class="painting-name">
                @paintingName
            </div>
        </div>
    }
</div>
